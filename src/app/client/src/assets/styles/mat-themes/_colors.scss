@use 'sass:map';
@use 'sass:meta';
@use '@angular/material' as mat;
@use "./palette" as *;
// @use './import-component-theme-config';


@mixin color-success {
  $success: mat.define-palette(mat.$green-palette);
  color: mat.get-color-from-palette($success, 500) !important;
}

@mixin color-info {
  $info: mat.define-palette(mat.$blue-palette);
  color: mat.get-color-from-palette($info, 900) !important;
}

@mixin color-error {
  $error: mat.define-palette(mat.$orange-palette);
  color: mat.get-color-from-palette($error, 900) !important;
}

@mixin theme-var-colors($theme) {

  // Get the color config from the theme.
  $color-config: mat.get-color-config($theme);
  // Get the primary color palette from the color-config.
  $primary: map.get($color-config, 'primary');
  $accent: map.get($color-config, 'accent');
  $warn: map.get($color-config, 'warn');
  $background: map.get($color-config, 'background');
  $foreground: map.get($color-config, 'foreground');
  $info: mat.define-palette(mat.$blue-palette);
  $success: mat.define-palette(mat.$green-palette);
  $error: mat.define-palette(mat.$orange-palette);

  $color-primary: mat.get-color-from-palette($primary);
  $color-accent: mat.get-color-from-palette($accent);
  $color-warn: mat.get-color-from-palette($warn);
  $color-success: mat.get-color-from-palette($success);
  $color-info: mat.get-color-from-palette($info);
  $color-error: mat.get-color-from-palette($error);

  --color-primary: #{$color-primary};
  --color-accent: #{$color-accent};
  --color-warn: #{$color-warn};
  --color-success: #{$color-success};
  --color-info: #{$color-info};
  --color-error: #{$color-error};

  /* color starts */
  .color-primary, .hover-color-primary:hover {
    color: var(--color-primary);
  }
  .color-accent, .hover-color-accent:hover {
    color: var(--color-accent);
  }

  .color-warn, .hover-color-warn:hover {
    color: var(--color-warn);
  }

  .color-success, .hover-color-success:hover {
    color: var(--color-success);
  }

  .color-info, .hover-color-info:hover {
    color: var(--color-info);
  }

  .color-error, .hover-color-error:hover {
    color: var(--color-error);
  }
  /* color ends */

  /* bg color starts */
  .bgcolor-primary, .hover-bgcolor-primary:hover {
    background-color: var(--color-primary);
    color: mat.get-color-from-palette($primary, 500-contrast);
  }

  .bgcolor-accent, .hover-bgcolor-accent:hover {
    background-color: var(--color-accent);
    color: mat.get-color-from-palette($accent, 500-contrast);
  }

  .bgcolor-warn, .hover-bgcolor-warn:hover {
    background-color: var(--color-warn);
    color: mat.get-color-from-palette($warn, 500-contrast);
  }

  .bgcolor-success, .hover-bgcolor-success:hover {
    background-color: var(--color-success);
    color: mat.get-color-from-palette($success, 500-contrast);
  }

  .bgcolor-info, .hover-bgcolor-info:hover {
    background-color: var(--color-info);
    color: mat.get-color-from-palette($info, 500-contrast);
  }

  .bgcolor-error, .hover-bgcolor-error:hover {
    background-color: var(--color-error);
    color: mat.get-color-from-palette($error, 500-contrast);
  }
 
  .bgcolor-primary100, .hover-bgcolor-primary100:hover {
    background-color: mat.get-color-from-palette($primary, 100);
    color: mat.get-color-from-palette($primary, 100-contrast);
  }

  .bgcolor-primary200, .hover-bgcolor-primary200:hover {
    background-color: mat.get-color-from-palette($primary, 200);
    color: mat.get-color-from-palette($primary, 200-contrast);
  }

  .mat-bg-white, .hover-bgcolor-white:hover{
    background-color: mat.get-color-from-palette($background, background);
    // color: mat.get-color-from-palette($accent, 500-contrast);
  }
  
   /* bg color ends */
}
/* color mixin ends here */


/* buttons custom color info, error, success */
$_ripple-opacity: 0.1;

// Applies a focus style to an mat-button element for each of the supported palettes.
@mixin _focus-overlay-color($config-or-theme, $variants) {
  $config: mat.get-color-config($config-or-theme);
  @each $variant, $variant-palette in $variants {
    &.mat-#{$variant} .mat-button-focus-overlay {
      background-color: mat.get-color-from-palette($variant-palette);
    }
  }
}

@mixin _ripple-background($palette, $hue, $opacity) {
  $background-color: mat.get-color-from-palette($palette, $hue, $opacity);
  background-color: $background-color;
  @if (meta.type-of($background-color) != color) {
    opacity: $opacity;
  }
}

@mixin _ripple-color($theme, $hue, $opacity, $variants) {
  @each $variant, $variant-palette in $variants {
    &.mat-#{$variant} .mat-ripple-element {
      @include _ripple-background($variant-palette, $hue, $opacity);
    }
  }
}

// Applies a property to an mat-button element for each of the supported palettes.
@mixin _theme-property($theme, $property, $hue, $variants) {
  $background: map.get($theme, background);
  $foreground: map.get($theme, foreground);

  @each $variant, $variant-palette in $variants {
    &.mat-#{$variant} {
      #{$property}: mat.get-color-from-palette($variant-palette, $hue);
    }

    &.mat-#{$variant} {
      &.mat-button-disabled {
        $palette: if($property == 'color', $foreground, $background);
        #{$property}: mat.get-color-from-palette($palette, disabled-button);
      }
    }
  }
}

@mixin color($config-or-theme, $variants) {
  $config: mat.get-color-config($config-or-theme);
  $foreground: map.get($config, foreground);
  $background: map.get($config, background);

  .button:not(:disabled),
  .mat-icon-button:not(:disabled),
  .mat-stroked-button:not(:disabled) {
    @include _theme-property($config, 'color', text, $variants);
    @include _focus-overlay-color($config, $variants);
  }

  .mat-flat-button:not(:disabled),
  .mat-raised-button:not(:disabled),
  .mat-unelevated-button:not(:disabled),
  .mat-fab:not(:disabled),
  .mat-mini-fab:not(:disabled) {
    @include _theme-property($config, 'color', default-contrast, $variants);
    @include _theme-property($config, 'background-color', default, $variants);
    @include _ripple-color($config, default-contrast, $_ripple-opacity, $variants);
  }
}

$theme-success: mat.define-palette(mat.$green-palette);
$theme-info: mat.define-palette(mat.$blue-palette);
$theme-error: mat.define-palette(mat.$orange-palette);
$theme-black: mat.define-palette(mat.$grey-palette);
$variants-theme: (
  success: $theme-success,
  info: $theme-info,
  error: $theme-error,
);
// and include mixin above
