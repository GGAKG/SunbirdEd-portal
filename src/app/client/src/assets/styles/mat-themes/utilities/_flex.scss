@use './breakpoints'as *;

$minmax: ("min": "above",
  "max": "below"
);

$declarations: center,
flex-start,
flex-end,
space-between,
space-around,
space-evenly;

$direction: "r"row,
"c"column,
"rr"row-reverse,
"cr"column-reverse;

@each $value in $declarations {
  @if (($value=='space-between') or ($value=='space-around') or ($value=='space-evenly')) {
    .flex-jc-#{$value} {
      justify-content: $value !important;
    }
  }

  @else {
    .flex-ai-#{$value} {
      align-items: $value !important;
    }

    .flex-as-#{$value} {
      align-self: $value !important;
    }

    .flex-jc-#{$value} {
      justify-content: $value !important;
    }
  }
}

@each $dtype,
$value in $direction {
  .flex-d#{$dtype} {
    flex-direction: $value !important;
  }
}

@each $mquery,
$mvalue in $minmax {

  @each $name,
  $breakpoint in $breakpoints {
    @each $value in $declarations {

      @media(#{$mquery}-width: $breakpoint) {
        @if (($value=='space-between') or ($value=='space-around') or ($value=='space-evenly')) {
          .flex-jc-#{$value}-#{$mvalue}-#{$name} {
            justify-content: $value !important;
          }
        }

        @else {
          .flex-ai-#{$value}-#{$mvalue}-#{$name} {
            align-items: $value !important;
          }

          .flex-as-#{$value}-#{$mvalue}-#{$name} {
            align-self: $value !important;
          }

          .flex-jc-#{$value}-#{$mvalue}-#{$name} {
            justify-content: $value !important;
          }
        }

        @each $dtype,
        $value in $direction {
          .flex-d#{$dtype}-#{$mvalue}-#{$name} {
            flex-direction: $value !important;
          }
        }
      }

    }
  }
}
